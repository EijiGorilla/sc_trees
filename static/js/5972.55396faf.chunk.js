"use strict";(self.webpackChunksc_trees=self.webpackChunksc_trees||[]).push([[5972],{25889:(e,s,t)=>{t.d(s,{AC:()=>c,Fz:()=>p,Q_:()=>h,_C:()=>u,fB:()=>d,i1:()=>g,jO:()=>m,kE:()=>l,ks:()=>i,s8:()=>f,sc:()=>a});var o=t(10064);const r="upload-assets",n=()=>new Error;class a extends o.Z{constructor(){super(`${r}:unsupported`,"Layer does not support asset uploads.",n())}}class i extends o.Z{constructor(){super(`${r}:no-glb-support`,"Layer does not support glb.",n())}}class l extends o.Z{constructor(){super(`${r}:no-supported-source`,"No supported external source found",n())}}class c extends o.Z{constructor(){super(`${r}:not-base-64`,"Expected gltf data in base64 format after conversion.",n())}}class u extends o.Z{constructor(){super(`${r}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",n())}}class p extends o.Z{constructor(e,s){super(`${r}:bad-response`,`Bad response. Uploaded ${e} items and received ${s} results.`,n())}}class d extends o.Z{constructor(e,s){super(`${r}-layer:upload-failed`,`Failed to upload mesh file ${e}. Error code: ${s?.code??"-1"}. Error message: ${s?.messages??"unknown"}`,n())}}class m extends o.Z{constructor(e){super(`${r}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,n())}}class f extends o.Z{constructor(){super(`${r}:convert3D-failed`,"convert3D failed.")}}class h extends o.Z{constructor(){super("invalid-input:no-model","No supported model found")}}class g extends o.Z{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}}},15972:(e,s,t)=>{t.d(s,{uploadAssets:()=>M});var o=t(76200),r=t(93169),n=t(32718),a=t(66978),i=t(38499),l=t(35995),c=t(71907),u=t(17493),p=t(25889);const d={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};var m=t(25899),f=t(42537),h=t(77427);function g(e){return new w(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>{},arguments.length>2?arguments[2]:void 0)}class w{constructor(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>{},t=arguments.length>2?arguments[2]:void 0;if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let s=0;s<e;s++){const t=s,o=1/e;this._weights[t]=o,this._progressMap.set(t,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(1===e&&(0,r.Z)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[s,t]of this._timingsMap){const o=Math.round(t.end-t.start)/1e3,r=Math.round(o/e*100);console.log(this.taskName??"Task",{stepKey:s,stepTime:o,relativeTime:r})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),(0,r.Z)("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const o=(0,h.s1)(this._timingsMap,e,(()=>({start:t,end:0})));1===s&&(o.end=t)}this.emitProgress()}simulate(e,s){return y((s=>this.setProgress(e,s)),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}}function y(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e=>{},s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:k;const t=performance.now();e(0);const o=setInterval((()=>{const o=performance.now()-t,r=1-Math.exp(-o/s);e(r)}),T);return(0,f.kB)((()=>{clearInterval(o),e(1)}))}function v(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:_;return(0,i.up)((0,i._H)(e*b/s))}const _=10,P=10,b=8e-6,T=(0,i.HA)(50),k=(0,i.HA)(1e3),A=1e6,x=20*A,F=2e9,Z=3;async function j(e,s,t){let{data:r,name:n,description:i}=e,c=null;try{const e=(0,l.v_)(s,"uploads"),p=(0,l.v_)(e,"info"),{data:d}=await(0,o.Z)(p,{query:{f:"json"},responseType:"json"});(0,a.k_)(t);const f=(0,m.M8)(s),h=d.maxUploadFileSize*A,w=f?F:h,y=f?Math.min(x,h):x;if(r.size>w)throw new Error("Data too large");const _=(0,l.v_)(e,"register"),{data:P}=await(0,o.Z)(_,{query:{f:"json",itemName:(u=n,u.replaceAll("/","_").replaceAll("\\","_")),description:i},responseType:"json",method:"post"});if((0,a.k_)(t),!P.success)throw new Error("Registration failed");const{itemID:b}=P.item;c=(0,l.v_)(e,b);const T=(0,l.v_)(c,"uploadPart"),k=Math.ceil(r.size/y),j=new Array;for(let s=0;s<k;++s)j.push(r.slice(s*y,Math.min((s+1)*y,r.size)));const E=j.slice().reverse(),M=new Array,$=g(k,t?.onProgress,"uploadItem"),S=async()=>{for(;0!==E.length;){const e=j.length-E.length,s=E.pop(),r=new FormData,n=$.simulate(e,v(s.size));try{r.append("f","json"),r.append("file",s),r.append("partId",`${e}`);const{data:n}=await(0,o.Z)(T,{timeout:0,body:r,responseType:"json",method:"post"});if((0,a.k_)(t),!n.success)throw new Error("Part upload failed")}finally{n.remove()}}};for(let s=0;s<Z&&0!==E.length;++s)M.push(S());await Promise.all(M);const N=(0,l.v_)(c,"commit"),{data:I}=await(0,o.Z)(N,{query:{f:"json",parts:j.map(((e,s)=>s)).join(",")},responseType:"json",method:"post"});if((0,a.k_)(t),!I.success)throw new Error("Commit failed");return I.item}catch(p){if(null!=c){const e=(0,l.v_)(c,"delete");await(0,o.Z)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw p}var u}var E=t(18277);async function M(e,s,t){const o=e.length;if(!o)return t?.onProgress?.(1),[];const r=g(o,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,o)=>async function(e,s,t){let{layer:o,ongoingUploads:r}=s;const n=r.get(e);if(n)return n;if(!function(e){return!!e.infoFor3D&&!!e.url}(o))throw new p.sc;if(function(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>(0,u.JG)(e,t)))}(e,o))return t?.onProgress?.(1),e;const l=async function(e,s,t){const{metadata:o}=e,{displaySource:r}=o,n=$(r?.source,s),l=!!n,u=o.externalSources.length>0,m=l?async function(e,s,t){return{source:await N(e,s,t),original:!0}}(n,s,t):u?async function(e,s,t){const o=U(s),{externalSources:r}=e.metadata,n=function(e,s){for(const t of e){const e=$(t.source,s);if(e)return e}return null}(r,s);if(!n)throw new p.kE;const a=g(d.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),l=await N(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:l,original:!0}]);const c=n.reduce(((e,s)=>{let{asset:t}=s;return t instanceof File?e+t.size:e}),0),u=a.simulate("serviceAssetsToGlb",function(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:P;return(0,i.up)((0,i._H)(e*b/s))}(c));try{return{source:await D(l,s,o)}}finally{u.remove()}}(e,s,t):async function(e,s,t){const o=g(d.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),r=async function(e,s,t){const o=U(s),r=await e.load(t),n=await r.toBinaryGLTF({origin:r.origin,signal:t?.signal,ignoreLocalTransform:!0});return(0,a.k_)(t),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${(0,c.zS)()}.glb`,assetType:o}}(e,s,{...t,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await I([r],s,{...t,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}(e,s,t),f=await m;return(0,a.k_)(t),e.addExternalSources([f]),e}(e,o,t);r.set(e,l);try{await l}finally{r.delete(e)}return e}(e,s,{...t,onProgress:r.makeOnProgress(o)}))))}function $(e,s){if(!e)return null;const{infoFor3D:{supportedFormats:t,editFormats:o}}=s,r=(0,u.zE)(e),n=new Array;let a=!1;for(let i=0;i<r.length;++i){const e=S(r[i],t);if(!e)return null;o.includes(e.assetType)&&(a=!0),n.push(e)}return a?n:null}function S(e,s){const t=(0,u.vj)(e,s);return t?{asset:e,assetType:t}:null}async function N(e,s,t){return I(e.map((e=>async function(e,s){const{asset:t,assetType:o}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(s);return(0,a.k_)(s),{blob:r,assetName:t.assetName,assetType:o}}(e,t))),s,t)}async function I(e,s,t){const o=g(d.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),r=await function(e,s,t){const o=g(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,r)=>{const i=async function(e,s,t){const{blob:o,assetType:r,assetName:i}=e;let c=null;try{const e=await j({data:o,name:i},s.url,t);(0,a.k_)(t),c={assetType:r,assetUploadId:e.itemID}}catch(k){(0,a.r9)(k),n.Z.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!c){const e=await(0,l.IR)(o);if((0,a.k_)(t),!e.isBase64)throw new p.AC;c={assetType:r,assetData:e.data}}if(!c)throw new p._C;return{item:c,assetName:i}}(await e,s,{...t,onProgress:o.makeOnProgress(r)});return(0,a.k_)(t),i})))}(e,s,{...t,onProgress:o.makeOnProgress("prepareAssetItems")});(0,a.k_)(t);const i=r.map((e=>{let{item:s}=e;return s})),{uploadResults:c}=await C(i,s,{...t,onProgress:o.makeOnProgress("uploadAssetItems")});return(0,a.k_)(t),e.map(((e,t)=>function(e,s,t){const{success:o}=s;if(!o){const{error:t}=s;throw new p.fB(e.assetName,t)}const{assetHash:r}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,l=(0,E.d1)(a,i);if(!l)throw new p.jO(a);return new u.CP(n,l,[new u.LL(`${t.parsedUrl.path}/assets/${r}`,r)])}(r[t],c[t],s)))}async function C(e,s,t){const r=y(t?.onProgress);try{const r=await(0,o.Z)((0,l.v_)(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,a.k_)(t),r.data.uploadResults.length!==e.length)throw new p.Fz(e.length,r.data.uploadResults.length);return r.data}finally{r.remove()}}async function D(e,s,t){const o=e.map((e=>{let{assetName:s,parts:t}=e;return{assetName:s,assetHash:t[0].partHash}})),r=s.capabilities?.operations.supportsAsyncConvert3D,n={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:r},a=(0,l.v_)(s.parsedUrl.path,"convert3D");let i;try{i=(await(r?O:B)(a,{query:n,responseType:"json",timeout:0})).data}catch(k){throw new p.s8}const{supportedFormats:c}=s.infoFor3D;return i.assets.map((e=>{const s=(0,E.S0)(e.contentType,c);if(!s)throw new p.jO(s);return new u.CP(e.assetName,e.contentType,[new u.LL(e.assetURL,e.assetHash)])}))}function B(e,s){return(0,o.Z)(e,s)}async function O(e,s){const t=(await(0,o.Z)(e,s)).data.statusUrl;for(;;){const e=(await(0,o.Z)(t,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,o.Z)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,a.e4)(L)}}function U(e){const{infoFor3D:s}=e,t=(0,E.S0)("model/gltf-binary",s.supportedFormats)??(0,E.Ow)("glb",s.supportedFormats);if(!t)throw new p.ks;return t}const L=(0,i.HA)(1e3)}}]);
//# sourceMappingURL=5972.55396faf.chunk.js.map